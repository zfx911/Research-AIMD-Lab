currentindex == 12 & BookletPart == 1 ~ 0,
currentindex == 13 & BookletPart == 1 ~ 1,
currentindex == 14 ~ 2,
currentindex == 15 ~ 3,
currentindex == 16 ~ 4,
currentindex == 17 ~ 5,
currentindex == 18 ~ 6,
currentindex == 19 ~ 7,
currentindex == 20 ~ 8,
currentindex == 21 ~ 9,
currentindex == 22 ~ 10,
currentindex == 23 ~ 11,
currentindex == 24 ~ 12,
currentindex == 25 ~ 13,
TRUE ~ currentindex  # Keep the original value if it doesn't match any rule
))
cor_rule <- function(new_currentindex) {
result <- case_when(
new_currentindex == 1 ~ 1,
new_currentindex == 2 ~ 2,
new_currentindex == 3 ~ 3,
new_currentindex == 5 ~ 4,
new_currentindex == 7 ~ 5,
new_currentindex == 9 ~ 6,
new_currentindex == 10 ~ 7,
new_currentindex == 11 ~ 8,
new_currentindex == 12 ~ 9,
TRUE ~ NA_integer_
)
return(result)
}
result_str_Q3 <- result_copy_Q3 %>%
mutate(
step_str = case_when(
PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023) & eventname == "Response" ~ paste0("Footprint", information),
eventname == "Nav:GoTo" & new_currentindex == 3 ~ "Navigate_to_Page04_Q3",
eventname == "Nav:GoTo" & new_currentindex != 3 ~ {
case_when(
new_currentindex %in% c(1,2,3,5,7,9,10,11,12) ~ paste0("Navigate_to_Page", new_currentindex+1, "_Q", cor_rule(new_currentindex)),
TRUE ~ paste0("Navigate_to_Page", new_currentindex+1)
)
},
eventname == "UI:Scrollbar" ~ sub('.*"event":"([^"]+).*"scrollTop":(\\d+).*', '\\1 \\2', information),
eventname == "Btn:Ruler" ~ paste0("Ruler_", gsub('.*To":"(\\w+).*', '\\1', information)),
eventname == "KeypadPopup" ~ "KeypadPopup",
TRUE ~ NA_character_  # If none of the conditions are met, set to NA
)
)
result_str_Q3[c("RowNumber","step_str","information")]
result_str_use_Q3 <- result_str_Q3 %>%
mutate(step_str = ifelse(eventname == "UI:Scrollbar", gsub(" ", "_", step_str), step_str))
result_str_use_Q3[c("RowNumber","step_str","information")]
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
filter(!is.na(step_str)) %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(step_str[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq")]
result_allsteps_Q3 <- merge(result_ruler_use_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_allsteps_Q3=result_allsteps_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_seq, .direction = "downup")
# result_allsteps_Q3
result_allsteps_Q3[c("idstud","SQ01F03_allsteps_seq","information")]
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(SQ01F03_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq_time <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq_time")]
# merge the data
result_alls_time_Q3 <- merge(result_allsteps_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_alls_time_Q3=result_alls_time_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_seq_time, .direction = "downup")
result_alls_time_Q3
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(SQ01F03_unit_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_timestamp <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_timestamp")]
# merge the data
result_all_unit_time_Q3 <- merge(result_alls_time_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_all_unit_time_Q3=result_all_unit_time_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_timestamp, .direction = "downup")
result_all_unit_time_Q3
# Group by idstud and calculate the sum of SQ01F03_time
result <- result_time_complete_Q3 %>%
group_by(idstud) %>%
summarise(SQ01F03_total_time = sum(SQ01F03_time, na.rm = TRUE))
# Merge the result back to the original data frame
result_total_time_Q3 <- merge(result_all_unit_time_Q3, result, by = "idstud", all.x = TRUE)
result_total_time_Q3
result_total_time_Q3[c("idstud","SQ01F03_time","SQ01F03_total_time")]
resultF03 <- result_total_time_Q3 %>%
select(idstud, idstud_ori, ImportLogID, BlockName, BookletPart,BlockInPart, module_path, SQ01F03_answer_sequence, SQ01F03_final_answer,SQ01F03_Ruler, SQ01F03_allsteps_seq, SQ01F03_allsteps_seq_time, SQ01F03_allsteps_timestamp, SQ01F03_total_time)
# resultF03
resultF03_save = resultF03[!duplicated(resultF03), ]
condition1 <- resultF03_save$BlockName == 'SQ01' &
resultF03_save$BookletPart == 1 &
resultF03_save$BlockInPart == 2
condition2 <- resultF03_save$BlockName == 'SQ01' &
resultF03_save$BookletPart == 2 &
resultF03_save$BlockInPart == 1
combined_condition <- condition1 | condition2
resultF03_save=resultF03_save%>%ungroup()%>%
filter(combined_condition)
resultF03_save
library(haven)
library(dplyr)
library(stringr)
library(tidyr)
library(jsonlite)
# Explore the data
head(df)
df_filter = df%>%
filter(df$PSIVariableIdentifier != 1025 |is.na(df$PSIVariableIdentifier))
condition1 <- df_filter$BlockName == 'SQ01' &
df_filter$BookletPart == 1 &
df_filter$BlockInPart == 2 &
df_filter$currentindex == 15
# Define the second condition
condition2 <- df_filter$BlockName == 'SQ01' &
df_filter$BookletPart == 2 &
df_filter$BlockInPart == 1 &
df_filter$currentindex == 3
# Combine the two conditions using OR (|) as you want rows satisfying either condition
combined_condition <- condition1 | condition2
# Use filter to get the rows that satisfy the conditions and one row below
result3 <- df_filter %>%
filter(combined_condition | lag(combined_condition, default = FALSE))
result3
result_use_Q3= transform(result3,
module_path = paste0("(", BlockName, ", ", BookletPart, ", ", BlockInPart, ")"))
head(result_use_Q3)
unique(result_use_Q3$eventname)
result_filter_Q3=result_use_Q3 %>%filter(eventname %in% c("Nav:GoTo", "Response", "UI:Scrollbar", "Btn:Ruler", "KeypadPopup"))
result_filter_Q3
result_time_complete_Q3=result_filter_Q3 %>%
mutate(SQ01F03_time = ifelse(currentindex == 15 & eventname == 'Nav:GoTo' | currentindex == 3 & eventname == 'Nav:GoTo', 0, ifelse(timemilisec - lag(timemilisec) > 0,
(timeunixsec - lag(timeunixsec) + (timemilisec - lag(timemilisec))/1000),
(timeunixsec - lag(timeunixsec) - 1 + (timemilisec + 1000 - lag(timemilisec))/1000))))
# head(result_time_complete_Q3[c("idstud","module_path","SQ01F03_time")])
# result_time_complete_Q3
result_time_complete_Q3 = result_time_complete_Q3%>%
mutate(RowNumber = row_number())
result_time_complete_Q3$SQ01F03_unit_time <- result_time_complete_Q3$timeunixsec * 1000 + result_time_complete_Q3$timemilisec
# show all the units
result_time_complete_Q3$SQ01F03_unit_time <- format(result_time_complete_Q3$SQ01F03_unit_time, scientific = FALSE)
result_time_complete_Q3
result_filter_pairs_Q3=result_filter_Q3 %>%
filter(result_filter_Q3$PSIVariableIdentifier != 1024 |is.na(result_filter_Q3$PSIVariableIdentifier))
result_filter_pairs_Q3
result_time_pair_Q3=result_filter_pairs_Q3 %>%
mutate(SQ01F03_time = ifelse(currentindex == 15 & eventname == 'Nav:GoTo' | currentindex == 3 & eventname == 'Nav:GoTo', 0, ifelse(timemilisec - lag(timemilisec) > 0,
(timeunixsec - lag(timeunixsec) + (timemilisec - lag(timemilisec))/1000),
(timeunixsec - lag(timeunixsec) - 1 + (timemilisec + 1000 - lag(timemilisec))/1000))))
result_time_pair_Q3 = result_time_pair_Q3%>%
mutate(RowNumber = row_number())
result_time_pair_Q3$SQ01F03_unit_time <- result_time_pair_Q3$timeunixsec * 1000 + result_time_pair_Q3$timemilisec
# show all the units
result_time_pair_Q3$SQ01F03_unit_time <- format(result_time_pair_Q3$SQ01F03_unit_time, scientific = FALSE)
result_time_pair_Q3
result_pairs_Q3 <- result_time_pair_Q3 %>%
mutate(information = case_when(
PSIVariableIdentifier == 1020 & information != "" & eventname == "Response" ~ paste0("A_", information),
PSIVariableIdentifier == 1021 & information != "" & eventname == "Response" ~ paste0("B_", information),
PSIVariableIdentifier == 1022 & information != "" & eventname == "Response" ~ paste0("C_", information),
PSIVariableIdentifier == 1023 & information != "" & eventname == "Response" ~ paste0("D_", information),
PSIVariableIdentifier == 1020 & information == "" & eventname == "Response" ~ "A_rm",
PSIVariableIdentifier == 1021 & information == "" & eventname == "Response" ~ "B_rm",
PSIVariableIdentifier == 1022 & information == "" & eventname == "Response" ~ "C_rm",
PSIVariableIdentifier == 1023 & information == "" & eventname == "Response" ~ "D_rm",
TRUE ~ information
))
result_pairs_Q3
# Filter data and arrange by idstud and information
df_filtered <- result_pairs_Q3 %>%
filter(PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023) & eventname == "Response")%>%
group_by(idstud) %>%
mutate(SQ01F03_sequence_list = list(information[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_answer_sequence <- sapply(df_filtered$SQ01F03_sequence_list, function(x) paste0("(", toString(x), ")"))
df_filtered
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_answer_sequence")]
result_answer_seq_Q3 <- merge(result_pairs_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
# result_answer_seq_Q3
result_answer_seq_Q3=result_answer_seq_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_answer_sequence, .direction = "downup")
result_answer_seq_Q3
df_filtered <- result_pairs_Q3 %>% filter(PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023))%>%
filter(IsFinalAnswer == 1)%>%
group_by(idstud) %>%
mutate(SQ01F03_sequence_list = list(information[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_final_answer <- sapply(df_filtered$SQ01F03_sequence_list, function(x) paste0("(", toString(x), ")"))
df_filtered
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_final_answer")]
result_Final_choice_Q3 <- merge(result_answer_seq_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
# result_Final_choice_Q3
result_Final_choice_Q3=result_Final_choice_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_final_answer, .direction = "downup")
result_Final_choice_Q3
df_filtered=result_time_complete_Q3%>%
group_by(idstud) %>%
mutate(SQ01F03_Ruler = ifelse(any(PSIVariableIdentifier == 1024 & information == 1), 1, 0))
df_filtered
df_filtered_merge = df_filtered[c("idstud","SQ01F03_Ruler")]
df_filtered_merge=distinct(df_filtered_merge)
df_filtered_merge
result_ruler_use_Q3 <- merge(result_Final_choice_Q3, df_filtered_merge, by = c("idstud"), all = TRUE)
# result_ruler_use_Q3
result_ruler_use_Q3=result_ruler_use_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_Ruler, .direction = "downup")
result_ruler_use_Q3
result_copy_Q3=data.frame(result_ruler_use_Q3)
result_copy_Q3 <- result_copy_Q3 %>%
mutate(new_currentindex = case_when(
currentindex == 12 & BookletPart == 1 ~ 0,
currentindex == 13 & BookletPart == 1 ~ 1,
currentindex == 14 ~ 2,
currentindex == 15 ~ 3,
currentindex == 16 ~ 4,
currentindex == 17 ~ 5,
currentindex == 18 ~ 6,
currentindex == 19 ~ 7,
currentindex == 20 ~ 8,
currentindex == 21 ~ 9,
currentindex == 22 ~ 10,
currentindex == 23 ~ 11,
currentindex == 24 ~ 12,
currentindex == 25 ~ 13,
TRUE ~ currentindex  # Keep the original value if it doesn't match any rule
))
cor_rule <- function(new_currentindex) {
result <- case_when(
new_currentindex == 1 ~ 1,
new_currentindex == 2 ~ 2,
new_currentindex == 3 ~ 3,
new_currentindex == 5 ~ 4,
new_currentindex == 7 ~ 5,
new_currentindex == 9 ~ 6,
new_currentindex == 10 ~ 7,
new_currentindex == 11 ~ 8,
new_currentindex == 12 ~ 9,
TRUE ~ NA_integer_
)
return(result)
}
result_str_Q3 <- result_copy_Q3 %>%
mutate(
step_str = case_when(
PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023) & eventname == "Response" ~ paste0("Footprint", information),
eventname == "Nav:GoTo" & new_currentindex == 3 ~ "Navigate_to_Page04_Q3",
eventname == "Nav:GoTo" & new_currentindex != 3 ~ {
case_when(
new_currentindex %in% c(1,2,3,5,7,9,10,11,12) ~ paste0("Navigate_to_Page", new_currentindex+1, "_Q", cor_rule(new_currentindex)),
TRUE ~ paste0("Navigate_to_Page", new_currentindex+1)
)
},
eventname == "UI:Scrollbar" ~ sub('.*"event":"([^"]+).*"scrollTop":(\\d+).*', '\\1 \\2', information),
eventname == "Btn:Ruler" ~ paste0("Ruler_", gsub('.*To":"(\\w+).*', '\\1', information)),
eventname == "KeypadPopup" ~ "KeypadPopup",
TRUE ~ NA_character_  # If none of the conditions are met, set to NA
)
)
result_str_Q3[c("RowNumber","step_str","information")]
result_str_use_Q3 <- result_str_Q3 %>%
mutate(step_str = ifelse(eventname == "UI:Scrollbar", gsub(" ", "_", step_str), step_str))
result_str_use_Q3[c("RowNumber","step_str","information")]
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
filter(!is.na(step_str)) %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(step_str[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq")]
result_allsteps_Q3 <- merge(result_ruler_use_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_allsteps_Q3=result_allsteps_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_seq, .direction = "downup")
# result_allsteps_Q3
result_allsteps_Q3[c("idstud","SQ01F03_allsteps_seq","information")]
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(SQ01F03_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq_time <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq_time")]
# merge the data
result_alls_time_Q3 <- merge(result_allsteps_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_alls_time_Q3=result_alls_time_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_seq_time, .direction = "downup")
result_alls_time_Q3
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
group_by(idstud) %>%
mutate(SQ01F03_allsteps_list = list(SQ01F03_unit_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_timestamp <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_timestamp")]
# merge the data
result_all_unit_time_Q3 <- merge(result_alls_time_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_all_unit_time_Q3=result_all_unit_time_Q3%>%
group_by(idstud) %>%
fill(SQ01F03_allsteps_timestamp, .direction = "downup")
result_all_unit_time_Q3
# Group by idstud and calculate the sum of SQ01F03_time
result <- result_time_complete_Q3 %>%
group_by(idstud) %>%
summarise(SQ01F03_total_time = sum(SQ01F03_time, na.rm = TRUE))
# Merge the result back to the original data frame
result_total_time_Q3 <- merge(result_all_unit_time_Q3, result, by = "idstud", all.x = TRUE)
result_total_time_Q3
result_total_time_Q3[c("idstud","SQ01F03_time","SQ01F03_total_time")]
resultF03 <- result_total_time_Q3 %>%
select(idstud, idstud_ori, ImportLogID, BlockName, BookletPart,BlockInPart, module_path, SQ01F03_answer_sequence, SQ01F03_final_answer,SQ01F03_Ruler, SQ01F03_allsteps_seq, SQ01F03_allsteps_seq_time, SQ01F03_allsteps_timestamp, SQ01F03_total_time)
# resultF03
resultF03_save = resultF03[!duplicated(resultF03), ]
condition1 <- resultF03_save$BlockName == 'SQ01' &
resultF03_save$BookletPart == 1 &
resultF03_save$BlockInPart == 2
condition2 <- resultF03_save$BlockName == 'SQ01' &
resultF03_save$BookletPart == 2 &
resultF03_save$BlockInPart == 1
combined_condition <- condition1 | condition2
resultF03_save=resultF03_save%>%ungroup()%>%
filter(combined_condition)
resultF03_save
write_sav(resultF03_save, "../../../new_data/grade5/Farm/SQ01F03_PSI.sav")
# write.csv(resultF03_save, file = 'csv_SQ01F03_PSI.csv', row.names = FALSE)
# write_sav(resultAll_save, "../../../new_data/grade5/Farm/SQ01S07_PSI.sav")
# write.csv(resultAll_save, file = 'csv_SQ01Sall_PSI.csv', row.names = FALSE)
library(haven)
library(dplyr)
library(stringr)
library(tidyr)
library(jsonlite)
library(haven)
library(dplyr)
library(stringr)
library(tidyr)
library(jsonlite)
# Explore the data
head(df)
df_filter = df%>%
filter(eventname != "Btn:Next")
condition1 <- df_filter$BlockName == 'SQ01' &
df_filter$BookletPart == 1 &
df_filter$BlockInPart == 2
condition2 <- df_filter$BlockName == 'SQ01' &
df_filter$BookletPart == 2 &
df_filter$BlockInPart == 1
# Combine the two conditions using OR (|) as you want rows satisfying either condition
combined_condition <- condition1 | condition2
# Use filter to get the rows that satisfy the conditions and one row below
result_all <- df_filter %>%
filter(combined_condition | lag(combined_condition, default = FALSE))
result_all
result_all_use = result_all%>%
filter(row_number() == 1 |
currentindex != lag(currentindex) |
idstud != lag(idstud) |
eventname == "Nav:GoTo")
result_all_use
result_time_complete_all=result_all_use %>%
arrange(idstud, timeunixsec, timemilisec) %>%
group_by(idstud) %>%
mutate(
SQ01_time =ifelse(lead(timemilisec) - timemilisec > 0, (lead(timeunixsec)-timeunixsec + (lead(timemilisec)-timemilisec)/1000),(lead(timeunixsec)-timeunixsec - 1 + (lead(timemilisec)+1000 -timemilisec)/1000))
)
result_time_complete_all
result_time_complete_all[, c('idstud', 'SQ01_time', 'timeunixsec', 'timemilisec')]
result_time_complete_all = result_time_complete_all%>%
mutate(RowNumber = row_number())
result_time_complete_all$SQ01_all_unit_time <- result_time_complete_all$timeunixsec * 1000 + result_time_complete_all$timemilisec
# show all the units
result_time_complete_all$SQ01_all_unit_time <- format(result_time_complete_all$SQ01_all_unit_time, scientific = FALSE)
result_time_complete_all[, c('idstud', 'SQ01_time','currentindex' ,'SQ01_all_unit_time', 'timeunixsec', 'timemilisec')]
# result_time_complete_all
result_time_complete_all=result_time_complete_all%>%
filter(
(eventname == "Nav:GoTo" | eventname == "UI:IsLoaded") &
BlockName == "SQ01"
)
result_time_complete_all
result_copy_all=data.frame(result_time_complete_all)
result_copy_all <- result_copy_all %>%
mutate(new_currentindex = case_when(
currentindex == 12 & BookletPart == 1 ~ 0,
currentindex == 13 & BookletPart == 1 ~ 1,
currentindex == 14 ~ 2,
currentindex == 15 ~ 3,
currentindex == 16 ~ 4,
currentindex == 17 ~ 5,
currentindex == 18 ~ 6,
currentindex == 19 ~ 7,
currentindex == 20 ~ 8,
currentindex == 21 ~ 9,
currentindex == 22 ~ 10,
currentindex == 23 ~ 11,
currentindex == 24 ~ 12,
currentindex == 25 ~ 13,
TRUE ~ currentindex
))
cor_rule <- function(new_currentindex) {
result <- case_when(
new_currentindex == 1 ~ 1,
new_currentindex == 2 ~ 2,
new_currentindex == 3 ~ 3,
new_currentindex == 5 ~ 4,
new_currentindex == 7 ~ 5,
new_currentindex == 9 ~ 6,
new_currentindex == 10 ~ 7,
new_currentindex == 11 ~ 8,
new_currentindex == 12 ~ 9,
TRUE ~ NA_integer_
)
return(result)
}
result_copy_use <- result_copy_all %>%
mutate(new_index = case_when(
new_currentindex %in% c(1,2,3,5,7,9,10,11,12) ~ paste0("Page", new_currentindex+1, "_Q", cor_rule(new_currentindex)),
TRUE ~ paste0("Page", new_currentindex+1)
))
result_copy_use
df_filtered <- result_copy_use %>%
group_by(idstud) %>%
mutate(SQ01_Navigate_list = list(new_index[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01_Navigate_seq <- sapply(df_filtered$SQ01_Navigate_list, function(x) paste0("(", toString(x), ")"))
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01_Navigate_seq")]
result_Navi_all <- merge(result_time_complete_all, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_Navi_all=result_Navi_all%>%
group_by(idstud) %>%
fill(SQ01_Navigate_seq, .direction = "downup")
result_Navi_all
# Filter data and create a list to record all the steps needed.
df_filtered <- result_copy_all %>%
group_by(idstud) %>%
mutate(SQ01_Navigate_list = list(SQ01_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01_Navigate_seq_time <- sapply(df_filtered$SQ01_Navigate_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01_Navigate_seq_time")]
# merge the data
result_alls_time_all <- merge(result_Navi_all, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_alls_time_all=result_alls_time_all%>%
group_by(idstud) %>%
fill(SQ01_Navigate_seq_time, .direction = "downup")
result_alls_time_all
# Filter data and create a list to record all the steps needed.
df_filtered <- result_copy_all %>%
group_by(idstud) %>%
mutate(SQ01_Navigate_list = list(SQ01_all_unit_time[order(row_number())]))
# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01_Navigate_timestamp <- sapply(df_filtered$SQ01_Navigate_list, function(x) paste0("(", toString(x), ")"))
# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01_Navigate_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01_Navigate_timestamp")]
# merge the data
result_all_unit_time_all <- merge(result_alls_time_all, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
result_all_unit_time_all=result_all_unit_time_all%>%
group_by(idstud) %>%
fill(SQ01_Navigate_timestamp, .direction = "downup")
result_all_unit_time_all
# Group by idstud and calculate the sum of SQ01_time
result <- result_copy_all %>%
group_by(idstud) %>%
summarise(SQ01_unit_total_time = sum(SQ01_time, na.rm = TRUE))
# Merge the result back to the original data frame
result_total_time_all <- merge(result_all_unit_time_all, result, by = "idstud", all.x = TRUE)
result_total_time_all
# result_total_time_all[c("idstud","SQ01_time","SQ01_unit_total_time")]
resultAll <- result_total_time_all %>%
select(idstud, idstud_ori, ImportLogID, BlockName, BookletPart,BlockInPart, SQ01_Navigate_seq, SQ01_Navigate_seq_time, SQ01_Navigate_timestamp, SQ01_unit_total_time)
# resultAll
resultAll_save = resultAll[!duplicated(resultAll), ]
condition1 <- resultAll_save$BlockName == 'SQ01' &
resultAll_save$BookletPart == 1 &
resultAll_save$BlockInPart == 2
condition2 <- resultAll_save$BlockName == 'SQ01' &
resultAll_save$BookletPart == 2 &
resultAll_save$BlockInPart == 1
combined_condition <- condition1 | condition2
resultAll_save=resultAll_save%>%ungroup()%>%
filter(combined_condition)
resultAll_save
write_sav(resultAll_save, "../../../new_data/grade5/Farm/SQ01Fall_PSI.sav")
# write.csv(resultAll_save, file = 'csv_SQ01Sall_PSI.csv', row.names = FALSE)
