---
title: "R Notebook"
output: html_notebook
---

# Read the Data (PSI)
```{r}
library(haven)
library(dplyr)
library(stringr)
library(tidyr)
library(jsonlite)
```

```{r}
df <- read_sav("../../data/grade5/ASLNORZ7_processdata_PSIstudents.sav")

# Explore the data
head(df)
```

Remove the rows of auto check for this question
```{r}
df_filter = df%>%
  filter(df$PSIVariableIdentifier != 1025 |is.na(df$PSIVariableIdentifier))
```

Filter the rows and exactly one row above the row that satisfied one of the conditions below: 

Condition 1: BlockName=SQ01, BookletPart=1, BlockInPart=2, currentindex=21.

Condition 2: BlockName=SQ01, BookletPart=2, BlockInPart=1, currentindex=7.

```{r}
condition1 <- df_filter$BlockName == 'SQ01' & 
              df_filter$BookletPart == 1 & 
              df_filter$BlockInPart == 2 & 
              df_filter$currentindex == 15 

# Define the second condition
condition2 <- df_filter$BlockName == 'SQ01' & 
              df_filter$BookletPart == 2 & 
              df_filter$BlockInPart == 1 & 
              df_filter$currentindex == 3 

# Combine the two conditions using OR (|) as you want rows satisfying either condition
combined_condition <- condition1 | condition2

# Use filter to get the rows that satisfy the conditions and one row below
result3 <- df_filter %>% 
  filter(combined_condition | lag(combined_condition, default = FALSE))

result3
```


### Module Path
Create a new column module_path based on (BlockName, BookletPart, BlockInPart, currentindex)
```{r}
result_use_Q3= transform(result3,
                       module_path = paste0("(", BlockName, ", ", BookletPart, ", ", BlockInPart, ")"))
head(result_use_Q3)
```

```{r}
unique(result_use_Q3$eventname)
```


### Time
```{r}
result_filter_Q3=result_use_Q3 %>%filter(eventname %in% c("Nav:GoTo", "Response", "UI:Scrollbar", "Btn:Ruler", "KeypadPopup"))
result_filter_Q3
```

```{r}
result_time_complete_Q3=result_filter_Q3 %>%
  mutate(SQ01F03_time = ifelse(currentindex == 15 & eventname == 'Nav:GoTo' | currentindex == 3 & eventname == 'Nav:GoTo', 0, ifelse(timemilisec - lag(timemilisec) > 0,
                                      (timeunixsec - lag(timeunixsec) + (timemilisec - lag(timemilisec))/1000),
                                      (timeunixsec - lag(timeunixsec) - 1 + (timemilisec + 1000 - lag(timemilisec))/1000))))
# head(result_time_complete_Q3[c("idstud","module_path","SQ01F03_time")])

# result_time_complete_Q3
```

```{r}
result_time_complete_Q3 = result_time_complete_Q3%>%
  mutate(RowNumber = row_number())
```

```{r}
result_time_complete_Q3$SQ01F03_unit_time <- result_time_complete_Q3$timeunixsec * 1000 + result_time_complete_Q3$timemilisec

# show all the units
result_time_complete_Q3$SQ01F03_unit_time <- format(result_time_complete_Q3$SQ01F03_unit_time, scientific = FALSE)
```

```{r}
result_time_complete_Q3
```


### Fill in Q&A pairs & Time for it.
Remove rows to check whether students use calculator or not.
```{r}
result_filter_pairs_Q3=result_filter_Q3 %>%
  filter(result_filter_Q3$PSIVariableIdentifier != 1024 |is.na(result_filter_Q3$PSIVariableIdentifier))
result_filter_pairs_Q3
```

```{r}
result_time_pair_Q3=result_filter_pairs_Q3 %>%
  mutate(SQ01F03_time = ifelse(currentindex == 15 & eventname == 'Nav:GoTo' | currentindex == 3 & eventname == 'Nav:GoTo', 0, ifelse(timemilisec - lag(timemilisec) > 0,
                                      (timeunixsec - lag(timeunixsec) + (timemilisec - lag(timemilisec))/1000),
                                      (timeunixsec - lag(timeunixsec) - 1 + (timemilisec + 1000 - lag(timemilisec))/1000))))


result_time_pair_Q3 = result_time_pair_Q3%>%
  mutate(RowNumber = row_number())

result_time_pair_Q3$SQ01F03_unit_time <- result_time_pair_Q3$timeunixsec * 1000 + result_time_pair_Q3$timemilisec

# show all the units
result_time_pair_Q3$SQ01F03_unit_time <- format(result_time_pair_Q3$SQ01F03_unit_time, scientific = FALSE)
```

```{r}
result_time_pair_Q3
```

If the column PSIVariableIdentifier == 1020 & information != "", then fill in "A_" + the value of the column information. If the column PSIVariableIdentifier == 1021 & information != "", then fill in "B_" + the value of the column information. If the column PSIVariableIdentifier == 1022 & information != "", then fill in "C_" + the value of the column information. If the column PSIVariableIdentifier == 1023 & information != "", then fill in "D_" + the value of the column information. If the column PSIVariableIdentifier == 1020 & information == "", then fill in "A_rm". If the column PSIVariableIdentifier == 1021 & information == "", then fill in "B_rm". If the column PSIVariableIdentifier == 1022 & information == "", then fill in "C_rm". If the column PSIVariableIdentifier == 1023 & information == "", then fill in "D_rm".
```{r}
result_pairs_Q3 <- result_time_pair_Q3 %>%
  mutate(information = case_when(
    PSIVariableIdentifier == 1020 & information != "" & eventname == "Response" ~ paste0("A_", information),
    PSIVariableIdentifier == 1021 & information != "" & eventname == "Response" ~ paste0("B_", information),
    PSIVariableIdentifier == 1022 & information != "" & eventname == "Response" ~ paste0("C_", information),
    PSIVariableIdentifier == 1023 & information != "" & eventname == "Response" ~ paste0("D_", information),
    
    PSIVariableIdentifier == 1020 & information == "" & eventname == "Response" ~ "A_rm",
    PSIVariableIdentifier == 1021 & information == "" & eventname == "Response" ~ "B_rm",
    PSIVariableIdentifier == 1022 & information == "" & eventname == "Response" ~ "C_rm",
    PSIVariableIdentifier == 1023 & information == "" & eventname == "Response" ~ "D_rm",
    TRUE ~ information
  ))

result_pairs_Q3
```


### answer in Sequence
Filter the data by PSIVariableIdentifier == 1020 or 1021 or 1022 or 1023. Then group by the student id, the new column SQ01F03_answer_sequence should created based on the sequence of the value of the column information in the order of if the row number is higher, their sequence should be higher.
```{r}
# Filter data and arrange by idstud and information
df_filtered <- result_pairs_Q3 %>%
  filter(PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023) & eventname == "Response")%>%
  group_by(idstud) %>%
  mutate(SQ01F03_sequence_list = list(information[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_answer_sequence <- sapply(df_filtered$SQ01F03_sequence_list, function(x) paste0("(", toString(x), ")"))

df_filtered
```

Create a new dataframe by merge the two dataframes by using the column idstud, and RowNumber.
```{r}
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_answer_sequence")]
```

```{r}
result_answer_seq_Q3 <- merge(result_pairs_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
# result_answer_seq_Q3
```

Then fill in all the missing value of the column SQ01F03_answer_sequence according to the student name.
```{r}
result_answer_seq_Q3=result_answer_seq_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_answer_sequence, .direction = "downup")
result_answer_seq_Q3
```


### Final Answer in sequence
Create a new column SQ01F03_final_answer. Filter the data by using PSIVariableIdentifier == 1020 or 1021 or 1022 or 1023 and IsfinalAnswer ==1, then groupby idstud, SQ01F03_final_answer = information.
```{r}
df_filtered <- result_pairs_Q3 %>% filter(PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023))%>%
filter(IsFinalAnswer == 1)%>%
  group_by(idstud) %>%
    mutate(SQ01F03_sequence_list = list(information[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_final_answer <- sapply(df_filtered$SQ01F03_sequence_list, function(x) paste0("(", toString(x), ")"))

df_filtered
```

Create a new dataframe by merge the two dataframes by using the column idstud, and RowNumber.
```{r}
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_final_answer")]
```

```{r}
result_Final_choice_Q3 <- merge(result_answer_seq_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
# result_Final_choice_Q3
```

Then fill in all the missing value of the column SQ01F03_final_answer according to the student name.
```{r}
result_Final_choice_Q3=result_Final_choice_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_final_answer, .direction = "downup")
result_Final_choice_Q3
```


### Ruler used or not
Group by idstud, if PSIVariableIdentifier == 1024 & information == 1 then the new column SQ01F03_Ruler == 1, otherwise return 0.
```{r}
df_filtered=result_time_complete_Q3%>%
  group_by(idstud) %>%
  mutate(SQ01F03_Ruler = ifelse(any(PSIVariableIdentifier == 1024 & information == 1), 1, 0))
df_filtered
```

Create a new dataframe by merge the two dataframes by using the column idstud, and RowNumber.
```{r}
df_filtered_merge = df_filtered[c("idstud","SQ01F03_Ruler")]

df_filtered_merge=distinct(df_filtered_merge)
df_filtered_merge
```


```{r}
result_ruler_use_Q3 <- merge(result_Final_choice_Q3, df_filtered_merge, by = c("idstud"), all = TRUE)
# result_ruler_use_Q3
```

Then fill in all the missing value of the column SQ01F03_Ruler according to the student name.
```{r}
result_ruler_use_Q3=result_ruler_use_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_Ruler, .direction = "downup")
result_ruler_use_Q3
```

### All Steps
Create a new dataframe by copy the original one.Create a new column step_str based on the other column.
If PSIVariableIdentifier == 1020 or 1021 or 1022 or 1023 & eventname == "Response", then step_str == "Part"+ information
If eventname == "Nav:GoTo" & new_currentindex == 3, then step_str == "Navigate_to_Page04_Q3"
If eventname == "Nav:GoTo" & new_currentindex != 3, then step_str == if new_currentindex in 1,2,3,5,7,9,10,11,12, then paste0("Navigate_to_Page", new_currentindex+1, "Q",cor_rule(new_currentindex)), else paste0("Navigate_to_Page", new_currentindex+1)
If eventname == "UI:Scrollbar", step_str == extract the value after event and scrollTop in the column information.
If eventname == "Btn:Ruler", step_str == "Ruler" + extract the value after To in the column information.
If eventname == KeypadPopup, step_str == KeypadPopup.

Create a column new_currentindex by changing the column currentindex based on the rule below:
12 to 0, 13 to 1, 14 to 2, 15 to 3, 16 to 4, 17 to 5, 18 to 6, 19 to 7, 20 to 8, 21 to 9, 22 to 10, 23 to 11, 24 to 12
```{r}
result_copy_Q3=data.frame(result_ruler_use_Q3)
result_copy_Q3 <- result_copy_Q3 %>%
  mutate(new_currentindex = case_when(
    currentindex == 12 & BookletPart == 1 ~ 0,
    currentindex == 13 & BookletPart == 1 ~ 1,
    currentindex == 14 ~ 2,
    currentindex == 15 ~ 3,
    currentindex == 16 ~ 4,
    currentindex == 17 ~ 5,
    currentindex == 18 ~ 6,
    currentindex == 19 ~ 7,
    currentindex == 20 ~ 8,
    currentindex == 21 ~ 9,
    currentindex == 22 ~ 10,
    currentindex == 23 ~ 11,
    currentindex == 24 ~ 12,
    currentindex == 25 ~ 13,
    TRUE ~ currentindex  # Keep the original value if it doesn't match any rule
  ))
```

create a cor_rule(new_currentindex) that:
if new_currentindex == 1,2,3,5,7,9,10,11,12, then
if new_currentindex == 1, return 1,
ifelse new_currentindex == 2, return 2,
ifelse new_currentindex == 3, return 3,
ifelse new_currentindex == 5, return 4,
ifelse new_currentindex == 7, return 5,
ifelse new_currentindex == 9, return 6,
ifelse new_currentindex == 10, return 7,
ifelse new_currentindex == 11, return 8,
ifelse new_currentindex == 12, return 9.
```{r}
cor_rule <- function(new_currentindex) {
  result <- case_when(
    new_currentindex == 1 ~ 1,
    new_currentindex == 2 ~ 2,
    new_currentindex == 3 ~ 3,
    new_currentindex == 5 ~ 4,
    new_currentindex == 7 ~ 5,
    new_currentindex == 9 ~ 6,
    new_currentindex == 10 ~ 7,
    new_currentindex == 11 ~ 8,
    new_currentindex == 12 ~ 9,
    TRUE ~ NA_integer_
  )
  return(result)
}
```

```{r}
result_str_Q3 <- result_copy_Q3 %>%
  mutate(
    step_str = case_when(
      PSIVariableIdentifier %in% c(1020, 1021, 1022, 1023) & eventname == "Response" ~ paste0("Footprint", information),
      eventname == "Nav:GoTo" & new_currentindex == 3 ~ "Navigate_to_Page04_Q3",
      eventname == "Nav:GoTo" & new_currentindex != 3 ~ {
        case_when(
          new_currentindex %in% c(1,2,3,5,7,9,10,11,12) ~ paste0("Navigate_to_Page", new_currentindex+1, "_Q", cor_rule(new_currentindex)),
          TRUE ~ paste0("Navigate_to_Page", new_currentindex+1)
        )
      },
      eventname == "UI:Scrollbar" ~ sub('.*"event":"([^"]+).*"scrollTop":(\\d+).*', '\\1 \\2', information),
      eventname == "Btn:Ruler" ~ paste0("Ruler_", gsub('.*To":"(\\w+).*', '\\1', information)),
      eventname == "KeypadPopup" ~ "KeypadPopup",
      TRUE ~ NA_character_  # If none of the conditions are met, set to NA
    )
  )
result_str_Q3[c("RowNumber","step_str","information")]
```
 
If the row of value of the column eventname == "UI:Scrollbar", then the value of the row of the column step_str substitute the white space to _.
```{r}
result_str_use_Q3 <- result_str_Q3 %>%
  mutate(step_str = ifelse(eventname == "UI:Scrollbar", gsub(" ", "_", step_str), step_str))
result_str_use_Q3[c("RowNumber","step_str","information")]
```

```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
  filter(!is.na(step_str)) %>%
  group_by(idstud) %>%
  mutate(SQ01F03_allsteps_list = list(step_str[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))
```

```{r}
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq")]

result_allsteps_Q3 <- merge(result_ruler_use_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_allsteps_Q3=result_allsteps_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_allsteps_seq, .direction = "downup")
# result_allsteps_Q3
```

```{r}
result_allsteps_Q3[c("idstud","SQ01F03_allsteps_seq","information")]
```


### Time Taken for All Steps
create a column to record the time taken for each single steps for each student to do this problem.
```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
  group_by(idstud) %>%
  mutate(SQ01F03_allsteps_list = list(SQ01F03_time[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_seq_time <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))

# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_seq_time")]

# merge the data
result_alls_time_Q3 <- merge(result_allsteps_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_alls_time_Q3=result_alls_time_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_allsteps_seq_time, .direction = "downup")
result_alls_time_Q3
```


### Unit Time for All Steps
create a column to record the time taken for each single steps for each student to do this problem.
```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q3 %>%
  group_by(idstud) %>%
  mutate(SQ01F03_allsteps_list = list(SQ01F03_unit_time[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ01F03_allsteps_timestamp <- sapply(df_filtered$SQ01F03_allsteps_list, function(x) paste0("(", toString(x), ")"))

# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ01F03_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ01F03_allsteps_timestamp")]

# merge the data
result_all_unit_time_Q3 <- merge(result_alls_time_Q3, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_all_unit_time_Q3=result_all_unit_time_Q3%>%
  group_by(idstud) %>%
  fill(SQ01F03_allsteps_timestamp, .direction = "downup")

result_all_unit_time_Q3
```

### Total time taken
Create a new column SQ01F03_total_time. Group by idstud, SQ01F03_total_time = sum the value of the column SQ01F03_time for each idstud.

```{r}
# Group by idstud and calculate the sum of SQ01F03_time
result <- result_time_complete_Q3 %>%
  group_by(idstud) %>%
  summarise(SQ01F03_total_time = sum(SQ01F03_time, na.rm = TRUE))

# Merge the result back to the original data frame
result_total_time_Q3 <- merge(result_all_unit_time_Q3, result, by = "idstud", all.x = TRUE)

result_total_time_Q3
```

```{r}
result_total_time_Q3[c("idstud","SQ01F03_time","SQ01F03_total_time")]
```


### Save the data
Filter the columns of data frame, only keep the new created columns and idstud, idstud_ori, ImportLogID, BlockName, BookletPart, BlockInPart.
```{r}
resultF03 <- result_total_time_Q3 %>%
  select(idstud, idstud_ori, ImportLogID, BlockName, BookletPart,BlockInPart, module_path, SQ01F03_answer_sequence, SQ01F03_final_answer,SQ01F03_Ruler, SQ01F03_allsteps_seq, SQ01F03_allsteps_seq_time, SQ01F03_allsteps_timestamp, SQ01F03_total_time)
# resultF03
```


```{r}
resultF03_save = resultF03[!duplicated(resultF03), ]

condition1 <- resultF03_save$BlockName == 'SQ01' & 
              resultF03_save$BookletPart == 1 & 
              resultF03_save$BlockInPart == 2 

condition2 <- resultF03_save$BlockName == 'SQ01' & 
              resultF03_save$BookletPart == 2 & 
              resultF03_save$BlockInPart == 1

combined_condition <- condition1 | condition2

resultF03_save=resultF03_save%>%ungroup()%>% 
  filter(combined_condition)
resultF03_save
```

Save the dataframe
```{r}
# write_sav(resultF03_save, "../../../new_data/grade5/Farm/SQ01F03_PSI.sav")

# write.csv(resultF03_save, file = 'csv_SQ01F03_PSI.csv', row.names = FALSE)
```



