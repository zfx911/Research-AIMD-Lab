---
title: "P04"
author: "zifengxu"
date: "2024-02-27"
output: html_document
---

# Read the Data (PSI)
```{r}
library(haven)
library(dplyr)
library(stringr)
library(tidyr)
library(jsonlite)
```

```{r}
df <- read_sav("../data/grade9/BSLNORZ7_PSI.sav")

# Explore the data
head(df)
```

Remove the rows of auto check for this question. 
```{r}
df_filter <- df %>%
  filter(df$PSIVariableIdentifier != 8022 |is.na(df$PSIVariableIdentifier))
```


Filter the rows and exactly one row above the row that satisfied one of the conditions below: 

Condition 1: BlockName=SQ01, BookletPart=1, BlockInPart=1, currentindex=3.

Condition 2: BlockName=SQ01, BookletPart=2, BlockInPart=2, currentindex=18.

```{r}
condition1 <- df_filter$BlockName == 'SQ02' & 
              df_filter$BookletPart == 1 & 
              df_filter$BlockInPart == 1 & 
              df_filter$currentindex == 3 

# Define the second condition
condition2 <- df_filter$BlockName == 'SQ02' & 
              df_filter$BookletPart == 2 & 
              df_filter$BlockInPart == 2 & 
              df_filter$currentindex == 18 

# Combine the two conditions using OR (|) as you want rows satisfying either condition
combined_condition <- condition1 | condition2

# Use filter to get the rows that satisfy the conditions and one row below
result4 <- df_filter %>% 
  filter(combined_condition | lag(combined_condition, default = FALSE))

result4
```


### Module Path
Create a new column module_path based on (BlockName, BookletPart, BlockInPart, currentindex)
```{r}
result_use_Q4= transform(result4,
                       module_path = paste0("(", BlockName, ", ", BookletPart, ", ", BlockInPart, ")"))
head(result_use_Q4)
```

```{r}
unique(result_use_Q4$eventname)
```


### Time
```{r}
result_filter_Q4=result_use_Q4 %>%filter(eventname %in% c("Nav:GoTo", "Response", "UI:Scrollbar", "Btn:Calc"))
result_filter_Q4
```

```{r}
result_time_complete_Q4=result_filter_Q4 %>%
  mutate(SQ02P04_time = ifelse(currentindex == 18 & eventname == 'Nav:GoTo' | currentindex == 3 & eventname == 'Nav:GoTo', 0, ifelse(timemilisec - lag(timemilisec) > 0,
                                      (timeunixsec - lag(timeunixsec) + (timemilisec - lag(timemilisec))/1000),
                                      (timeunixsec - lag(timeunixsec) - 1 + (timemilisec + 1000 - lag(timemilisec))/1000))))
# head(result_time_complete_Q4[c("idstud","module_path","SQ02P04_time")])

# result_time_complete_Q4
```

```{r}
result_time_complete_Q4 = result_time_complete_Q4%>%
  mutate(RowNumber = row_number())
```

```{r}
result_time_complete_Q4$SQ02P04_unit_time <- result_time_complete_Q4$timeunixsec * 1000 + result_time_complete_Q4$timemilisec

# show all the units
result_time_complete_Q4$SQ02P04_unit_time <- format(result_time_complete_Q4$SQ02P04_unit_time, scientific = FALSE)
```

```{r}
result_time_complete_Q4
```


### Change the choice pair
If the column PSIVariableIdentifier == 8012, and the column information is not empty, then fill in "Click_Tank1" to information.
If the column PSIVariableIdentifier == 8013, and the column information is not empty, then fill in "Tank1_A_" + information to information.
If the column PSIVariableIdentifier == 8014, and the column information is not empty, then fill in "Tank1_B_" + information to information.
If the column PSIVariableIdentifier == 8015, and the column information is not empty, then fill in "Click_Tank2" to information.
If the column PSIVariableIdentifier == 8016, and the column information is not empty, then fill in "Tank2_A_" + information to information.
If the column PSIVariableIdentifier == 8017, and the column information is not empty, then fill in "Tank2_B_" + information to information.
If the column PSIVariableIdentifier == 8018, and the column information is not empty, then fill in "Click_Tank3" to information.
If the column PSIVariableIdentifier == 8019, and the column information is not empty, then fill in "Tank3_A_" + information to information.
If the column PSIVariableIdentifier == 8020, and the column information is not empty, then fill in "Tank3_B_" + information to information.
```{r}
result_all_actions_Q4 <- result_time_complete_Q4 %>%
  mutate(information = case_when(
    PSIVariableIdentifier == 8012 & information != "" ~ "Click_Tank1",
    PSIVariableIdentifier == 8013 & information != "" ~ paste0("Tank1_A_", information),
    PSIVariableIdentifier == 8014 & information != "" ~ paste0("Tank1_B_", information),
    PSIVariableIdentifier == 8015 & information != "" ~ "Click_Tank2",
    PSIVariableIdentifier == 8016 & information != "" ~ paste0("Tank2_A_", information),
    PSIVariableIdentifier == 8017 & information != "" ~ paste0("Tank2_B_", information),
    PSIVariableIdentifier == 8018 & information != "" ~ "Click_Tank3",
    PSIVariableIdentifier == 8019 & information != "" ~ paste0("Tank3_A_", information),
    PSIVariableIdentifier == 8020 & information != "" ~ paste0("Tank3_B_", information),
    TRUE ~ information
  ))

result_all_actions_Q4
```


### Choice in Sequence
Filter the data by PSIVariableIdentifier == 8013,8014,8016,8017,8019,8020. Then group by the student id, the new column SQ02P04_answer_sequence should created based on the sequence of the value of the column information in the order of if the row number is higher, their sequence should be higher.
```{r}
# Filter data and arrange by idstud and information
df_filtered <- result_all_actions_Q4 %>%
  filter(PSIVariableIdentifier %in% c(8013,8014,8016,8017,8019,8020))%>%
  group_by(idstud) %>%
  mutate(SQ02P04_sequence_list = list(information[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ02P04_answer_sequence <- sapply(df_filtered$SQ02P04_sequence_list, function(x) paste0("(", toString(x), ")"))

df_filtered
```

Create a new dataframe by merge the two dataframes by using the column idstud, and RowNumber.
```{r}
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ02P04_answer_sequence")]
```

```{r}
result_choice_seq_Q4 <- merge(result_all_actions_Q4, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)
# result_choice_seq_Q4
```

Then fill in all the missing value of the column SQ02P04_answer_sequence according to the student name.
```{r}
result_choice_seq_Q4=result_choice_seq_Q4%>%
  group_by(idstud) %>%
  fill(SQ02P04_answer_sequence, .direction = "downup")
result_choice_seq_Q4
```


### Final Choice in sequence
Filter the dataframe that only remain those columns: idstud, PSIVariableIdentifier, IsFinalAnswer, information, RowNumber.
```{r}
filtered_col = result_all_actions_Q4%>%
  select(idstud, PSIVariableIdentifier, IsFinalAnswer, information, RowNumber)
filtered_col
```

Create a new column SQ02P04_final_answer. Group by idstud, filter the data by using PSIVariableIdentifier == 8012,8013,8014,8015,8016,8017,8018,8019,8020 and IsfinalAnswer == 1. For each idstud, if its  PSIVariableIdentifier column is missing any of these numbers ï¼ˆ8013,8014,8016,8017,8019,8020) after filtering, then create a new row for this idstud based on following rule: 
If PSIVariableIdentifier == 8013 is missing, then create a new row with the column PSIVariableIdentifier == 8013, information == "Tank1_A_NA", IsFinalAnswer == 1, RowNumber == -1
If PSIVariableIdentifier == 8014 is missing, then create a new row with the column PSIVariableIdentifier == 8014, information == "Tank1_B_NA", IsFinalAnswer == 1, RowNumber == -1
If PSIVariableIdentifier == 8016 is missing, then create a new row with the column PSIVariableIdentifier == 8016, information == "Tank2_A_NA", IsFinalAnswer == 1, RowNumber == -1
If PSIVariableIdentifier == 8017 is missing, then create a new row with the column PSIVariableIdentifier == 8017, information == "Tank2_B_NA", IsFinalAnswer == 1, RowNumber == -1
If PSIVariableIdentifier == 8019 is missing, then create a new row with the column PSIVariableIdentifier == 8019, information == "Tank3_A_NA", IsFinalAnswer == 1, RowNumber == -1
If PSIVariableIdentifier == 8020 is missing, then create a new row with the column PSIVariableIdentifier == 8020, information == "Tank3_B_NA", IsFinalAnswer == 1, RowNumber == -1

Then create a new column SQ02P04_sequence_list which is a list of information group by idstud order by PSIVariableIdentifier
```{r}
filtered_col %>%
  filter(PSIVariableIdentifier %in% c(8013, 8014, 8016, 8017, 8019, 8020)) %>%
  filter(IsFinalAnswer == 1) %>%
  group_by(idstud)
```

```{r}
df_filtered=filtered_col %>%
  filter(PSIVariableIdentifier %in% c(8013, 8014, 8016, 8017, 8019, 8020)) %>%
  filter(IsFinalAnswer == 1) %>%
  group_by(idstud) %>%
  complete(PSIVariableIdentifier = c(8013, 8014, 8016, 8017, 8019, 8020), fill = list(IsFinalAnswer = 1, RowNumber = -1)) %>%
  mutate(information = case_when(
    PSIVariableIdentifier == 8013 & RowNumber == -1 ~ "Tank1_A_NA",
    PSIVariableIdentifier == 8014 & RowNumber == -1 ~ "Tank1_B_NA",
    PSIVariableIdentifier == 8016 & RowNumber == -1 ~ "Tank2_A_NA",
    PSIVariableIdentifier == 8017 & RowNumber == -1 ~ "Tank2_B_NA",
    PSIVariableIdentifier == 8019 & RowNumber == -1 ~ "Tank3_A_NA",
    PSIVariableIdentifier == 8020 & RowNumber == -1 ~ "Tank3_B_NA",
    TRUE ~ information
  )) %>%
  ungroup() %>%
  arrange(idstud, PSIVariableIdentifier) %>%
  group_by(idstud) %>%
  summarize(SQ02P04_sequence_list = list(information)) %>%
  ungroup()

df_filtered$SQ02P04_final_answer <- sapply(df_filtered$SQ02P04_sequence_list, function(x) paste0("(", toString(x), ")"))

df_filtered
```

Create a new dataframe by merge the two dataframes by using the column idstud.
```{r}
df_filtered_merge = df_filtered[c("idstud","SQ02P04_final_answer")]
```

```{r}
result_Final_choice_Q4 <- merge(result_choice_seq_Q4, df_filtered_merge, by = c("idstud"), all = TRUE)
result_Final_choice_Q4
```


### All Steps
Create a new dataframe by copy the original one.Create a new column step_str based on the other column.
If PSIVariableIdentifier == 8012, then step_str == "Click_Tank1".
If PSIVariableIdentifier == 8015, then step_str == "Click_Tank2".
If PSIVariableIdentifier == 8018, then step_str == "Click_Tank3".
If PSIVariableIdentifier == 8013,8014,8016,8017,8019,8020, then step_str == information
If eventname == "Nav:GoTo" & new_currentindex == 3, then step_str == "Begin_Q4"
If eventname == "Nav:GoTo" & new_currentindex != 3, then step_str == "Nevigate_to_Q"+ value of the column new_currentindex
If eventname == "UI:Scrollbar", step_str == extract the value after event and scrollTop in the column information.
If eventname == "Btn:Calc", step_str == "Calculator" + extract the value after To in the column information.

Create a column new_currentindex by changing the column currentindex based on the rule below:
15 to 0, 16 to 1, 17 to 2, 18 to 3, 19 to 4, 20 to 56, 21 to 6, 22 to 7, 23 to 8, 24 to 9, 25 to 10, 26 to 11, 27 to 12, 28 to 13
```{r}
result_copy_Q4=data.frame(result_all_actions_Q4)
result_copy_Q4 <- result_copy_Q4 %>%
  mutate(new_currentindex = case_when(
    currentindex == 15 ~ 0,
    currentindex == 16 ~ 1,
    currentindex == 17 ~ 2,
    currentindex == 18 ~ 3,
    currentindex == 19 ~ 4,
    currentindex == 20 ~ 5,
    currentindex == 21 ~ 6,
    currentindex == 22 ~ 7,
    currentindex == 23 ~ 8,
    currentindex == 24 ~ 9,
    currentindex == 25 ~ 10,
    currentindex == 26 ~ 11,
    currentindex == 27 ~ 12,
    currentindex == 28 ~ 13,
    TRUE ~ currentindex  # Keep the original value if it doesn't match any rule
  ))
```

```{r}
result_str_Q4<- result_copy_Q4 %>%
  mutate(
    step_str = case_when(
      PSIVariableIdentifier %in% c(8012,8013,8014,8015,8016,8017,8018,8019,8020) ~ information,
      eventname == "Nav:GoTo" & new_currentindex == 3 ~ "Begin_Q4",
      eventname == "Nav:GoTo" & new_currentindex != 3 ~ paste0("Navigate_to_Q", new_currentindex+1),
      eventname == "UI:Scrollbar" ~ sub('.*"event":"([^"]+).*"scrollTop":(\\d+).*', '\\1 \\2', information),
      eventname == "Btn:Calc" ~ paste0("Calculator_", gsub('.*To":"(\\w+).*', '\\1', information)),
      TRUE ~ NA_character_  # If none of the conditions are met, set to NA
    )
  )
result_str_Q4[c("RowNumber","step_str","information")]
```
 
If the row of value of the column eventname == "UI:Scrollbar", then the value of the row of the column step_str substitute the white space to _.
```{r}
result_str_use_Q4 <- result_str_Q4 %>%
  mutate(step_str = ifelse(eventname == "UI:Scrollbar", gsub(" ", "_", step_str), step_str))
result_str_use_Q4[c("RowNumber","step_str","information")]
```

```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q4 %>%
  filter(!is.na(step_str)) %>%
  group_by(idstud) %>%
  mutate(SQ02P04_allsteps_list = list(step_str[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ02P04_allsteps_seq <- sapply(df_filtered$SQ02P04_allsteps_list, function(x) paste0("(", toString(x), ")"))
```

```{r}
df_filtered <- select(df_filtered, -SQ02P04_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ02P04_allsteps_seq")]

result_allsteps_Q4 <- merge(result_Final_choice_Q4, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_allsteps_Q4=result_allsteps_Q4%>%
  group_by(idstud) %>%
  fill(SQ02P04_allsteps_seq, .direction = "downup")
# result_allsteps_Q4
```

```{r}
result_allsteps_Q4[c("idstud","SQ02P04_allsteps_seq","information")]
```


### Time Taken for All Steps
create a column to record the time taken for each single steps for each student to do this problem.
```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q4 %>%
  group_by(idstud) %>%
  mutate(SQ02P04_allsteps_list = list(SQ02P04_time[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ02P04_allsteps_seq_time <- sapply(df_filtered$SQ02P04_allsteps_list, function(x) paste0("(", toString(x), ")"))

# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ02P04_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ02P04_allsteps_seq_time")]

# merge the data
result_alls_time_Q4 <- merge(result_allsteps_Q4, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_alls_time_Q4=result_alls_time_Q4%>%
  group_by(idstud) %>%
  fill(SQ02P04_allsteps_seq_time, .direction = "downup")
result_alls_time_Q4
```


### Timestamp for All Steps in milisecond
create a column to record the time taken for each single steps for each student to do this problem.
```{r}
# Filter data and create a list to record all the steps needed.
df_filtered <- result_str_use_Q4 %>%
  group_by(idstud) %>%
  mutate(SQ02P04_allsteps_list = list(SQ02P04_unit_time[order(row_number())]))

# Convert the list column to a new column with the desired format, and then drop the list column
df_filtered$SQ02P04_allsteps_timestamp <- sapply(df_filtered$SQ02P04_allsteps_list, function(x) paste0("(", toString(x), ")"))

# filter the data and select column to merge
df_filtered <- select(df_filtered, -SQ02P04_allsteps_list)
df_filtered_merge = df_filtered[c("idstud","RowNumber","SQ02P04_allsteps_timestamp")]

# merge the data
result_all_unit_time_Q4 <- merge(result_alls_time_Q4, df_filtered_merge, by = c("idstud","RowNumber"), all = TRUE)

result_all_unit_time_Q4=result_all_unit_time_Q4%>%
  group_by(idstud) %>%
  fill(SQ02P04_allsteps_timestamp, .direction = "downup")

result_all_unit_time_Q4
```

### Total time taken
Create a new column SQ02P04_total_time. Group by idstud, SQ02P04_total_time = sum the value of the column SQ02P04_time for each idstud.

```{r}
# Group by idstud and calculate the sum of SQ02P04_time
result <- result_time_complete_Q4 %>%
  group_by(idstud) %>%
  summarise(SQ02P04_total_time = sum(SQ02P04_time, na.rm = TRUE))

# Merge the result back to the original data frame
result_total_time_Q4 <- merge(result_all_unit_time_Q4, result, by = "idstud", all.x = TRUE)

result_total_time_Q4
```

```{r}
result_total_time_Q4[c("idstud","SQ02P04_time","SQ02P04_total_time")]
```


### Save the data
Filter the columns of data frame, only keep the new created columns and idstud, idstud_ori, ImportLogID, BlockName, BookletPart, BlockInPart.
```{r}
resultP04 <- result_total_time_Q4 %>%
  select(idstud, idstud_ori, ImportLogID, BlockName, BookletPart,BlockInPart, module_path, SQ02P04_answer_sequence, SQ02P04_final_answer, SQ02P04_allsteps_seq, SQ02P04_allsteps_seq_time, SQ02P04_allsteps_timestamp, SQ02P04_total_time)
# resultP04
```


```{r}
resultP04_save = resultP04[!duplicated(resultP04), ]

condition1 <- resultP04_save$BlockName == 'SQ02' & 
              resultP04_save$BookletPart == 1 & 
              resultP04_save$BlockInPart == 1 

condition2 <- resultP04_save$BlockName == 'SQ02' & 
              resultP04_save$BookletPart == 2 & 
              resultP04_save$BlockInPart == 2

combined_condition <- condition1 | condition2

resultP04_save=resultP04_save%>%ungroup()%>% 
  filter(combined_condition)
resultP04_save
```

Save the dataframe
```{r}
# write_sav(resultP04_save, "../../../new_data/grade9/Pepper_Plants/SQ12P04_PSI.sav")

# write.csv(resultP04_save, file = 'csv_SQ12P04_PSI.csv', row.names = FALSE)
```



